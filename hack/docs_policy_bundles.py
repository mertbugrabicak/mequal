# Generated with assistance from a large language model trained by Google.

import json
import sys

def generate_adoc(data, output_filename):
    """Generates an AsciiDoc file from the policy metadata JSON."""
    adoc_lines = []

    # Main document title
    adoc_lines.append("= Policy Bundles included in Mequal")
    adoc_lines.append("\n") # Add a blank line after the main title

    bundles = data.get("bundles", [])
    if not bundles:
        adoc_lines.append("No policy bundles found in the input data.")
        print("Warning: No bundles found in the JSON data.")

    for bundle in bundles:
        bundle_id = bundle.get("bundle_id", "N/A")
        bundle_version = bundle.get("bundle_version", "N/A")
        bundle_source = bundle.get("source")

        # Bundle Header (Level 2)
        adoc_lines.append(f"== Bundle: {bundle_id} ({bundle_version})")
        adoc_lines.append("\n")
        if bundle_source:
            adoc_lines.append(f"Source: {bundle_source}")
            adoc_lines.append("\n")

        policies = bundle.get("policies", [])
        if not policies:
            adoc_lines.append("_No policies defined in this bundle._")
            adoc_lines.append("\n")
            continue # Skip to the next bundle if no policies

        for policy in policies:
            policy_id = policy.get("policy_id", "N/A")
            policy_title = policy.get("policy_title", "N/A")
            policy_description = policy.get("policy_description", "_No description provided._")
            policy_severity = policy.get("policy_severity", "undefined")
            policy_path = policy.get("policy_path")

            # Policy Header (Level 3)
            adoc_lines.append(f"=== Policy: {policy_title} (`{policy_id}`)") # Use backticks for code style ID
            adoc_lines.append("\n")

            # Policy Details
            adoc_lines.append(policy_description)
            adoc_lines.append("\n")
            adoc_lines.append(f"*Severity:* {policy_severity}")
            if policy_path:
                adoc_lines.append(f"*Rego Path:* `{policy_path}`") # Use backticks for code style path
            adoc_lines.append("\n")


            rules = policy.get("rules", [])
            if rules:
                # Rules Subheading (Level 4)
                adoc_lines.append("==== Rules")
                adoc_lines.append("\n")
                # Rules List
                for rule in rules:
                    rule_id = rule.get("rule_id", "N/A")
                    rule_title = rule.get("rule_title", "N/A")
                    rule_description = rule.get("rule_description", "_No description provided._")
                    # Use bullet points for rules
                    adoc_lines.append(f"* *{rule_title}* (`{rule_id}`): {rule_description}")
                adoc_lines.append("\n") # Blank line after rules list
            else:
                adoc_lines.append("_No specific rules defined for this policy._")
                adoc_lines.append("\n")

    # --- Write to file ---
    try:
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write("\n".join(adoc_lines))
        print(f"Successfully generated AsciiDoc file: {output_filename}")
    except Exception as e:
        print(f"Error writing AsciiDoc file {output_filename}: {e}")

# --- Main script execution ---

input_json_file = './bundle/bundle_metadata.json' # Input file generated by the previous script
output_adoc_file = 'docs/modules/policies/pages/index.adoc'  # Output AsciiDoc file

# Load the JSON data
try:
    with open(input_json_file, 'r') as f:
        policy_data = json.load(f)
except FileNotFoundError:
    print(f"Error: Input JSON file not found: {input_json_file}")
    sys.exit(1)
except json.JSONDecodeError:
    print(f"Error: Could not decode JSON from {input_json_file}")
    sys.exit(1)
except Exception as e:
    print(f"An unexpected error occurred reading {input_json_file}: {e}")
    sys.exit(1)

# Generate the AsciiDoc content
if policy_data:
    generate_adoc(policy_data, output_adoc_file)